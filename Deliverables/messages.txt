
/* i metodi sendHall, sendIslands, sendDashboard, sendCloudCards mandano lo stato attuale delle rispettive liste degli studenti presenti. E vengono poi gestite dal client, che stampa a video lo stato delle isole, dashboard ecc...  */

MOVE STUDENTS TO ISLAND:

Client---->Server
Command("move student to island", "indexHall", "indexIsland")

<-----
on ok 
sendToClient("hall", sendHall}
sendToClient("islands", sendIslands}


<-----
on error (if input is a null student or invalid island index)
sendToClient("error","Error moving student to island")

<-----
on error (if the command is sent before play an assistant card)
sendToClient("error", " Before move students to island, you have to play an assistant card! ")










MOVE STUDENT TO CLASSROOM:

Client---->Server
Command("move student to classroom", "indexHall")


<-----
on ok
sendToClient("dashboard", sendSingleDashboard}


<-----
on error (if input is a null student or invalid hall's index)
sendToClient("error","Error moving student to classroom")

<-----
on error (if the command is sent before play an assistant card)
sendToClient("error", " Before move students to classroom, you have to play an assistant card! ")








PLAY ASSISTANT CARD:

Client---->Server
Command("play assistant card", "orderOfCard")


<----
on ok
{"msg","played card " + orderOfCard + "\n value: " + order + "\n moves of MN available: " + movesOfMN"}


<----
on error
sendToClient("error", "card not available")

<----
on error (if the player has already played the card
sendToClient("error", "You already played this card")

<----
on error (if the card was already played by another player)
sendToClient("error", "Assistant card already played by another player")



PLAY SPECIAL CARD:

Client---->Server
Command("play character card", "indexOfTheCard", "")


<----
on ok
sentToAllClient("msg", currentPlayer.getName() + " has played the card " + characterCard.getName())



<----
on error
sendToClient("error", "You don't have enough coins to play this card")



Client---->Server
Command("play character card", "indexOfTheCard", "islandIndex")

<----
on error
sendToClient("error", "Error selecting island");


Client---->Server
Command("play character card", "indexOfTheCard", "pawnColor")

<----
on error
sendToClient("error", "Error selecting color");











MOVE MOTHER NATURE:

Client---->Server
Command("move mn", "destinationIslandIndex")


<----
on ok
sendToClient("islands", "sendIslands")

<----
on error (if player trys to move mother nature in planning phase, or before he finished his student's moves.
sendToClient("error", " You can't move mother nature now! ")

<----
on error(if the destination island is too far away from the player's mother nature moves)
sendToClient("error", "error, you can move mother nature of " + player.getMovesOfMN() + " moves")










CHOOSE CLOUD CARD:

Client---->Server
Command("choose cc", "indexOfCloudCard")


<----
on ok
sendToClient("cloudCards", "sendCloudCards")

<----
on error(if the player trys to choose a cloud card in planning phase, or before he has moved mother nature)
sendToClient("error", "You can't choose a cloud card now")

<----
on error (if the cloud cards index is not valid or the cloud card is already chosen by another player)
sendToClient("error", "Error, choose a valid cloud card")






